/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2015-11-16 19:10:01 UTC)
 * on 2016-01-03 at 00:51:16 UTC 
 * Modify at your own risk.
 */

package com.appspot.skoozi_959.skooziqna;

/**
 * Service definition for Skooziqna (v0.1).
 *
 * <p>
 * SkooziQnAAPI v0.1
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SkooziqnaRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Skooziqna extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the skooziqna library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://skoozi-959.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "skooziqna/v0.1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Skooziqna(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Skooziqna(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Admin collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Skooziqna skooziqna = new Skooziqna(...);}
   *   {@code Skooziqna.Admin.List request = skooziqna.admin().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Admin admin() {
    return new Admin();
  }

  /**
   * The "admin" collection of methods.
   */
  public class Admin {

    /**
     * Rebuild the search index
     *
     * Create a request for the method "admin.rebuildindex".
     *
     * This request holds the parameters needed by the skooziqna server.  After setting any optional
     * parameters, call the {@link Rebuildindex#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Rebuildindex rebuildindex() throws java.io.IOException {
      Rebuildindex result = new Rebuildindex();
      initialize(result);
      return result;
    }

    public class Rebuildindex extends SkooziqnaRequest<com.appspot.skoozi_959.skooziqna.model.CoreModelsStatusResponse> {

      private static final String REST_PATH = "rebuildindex";

      /**
       * Rebuild the search index
       *
       * Create a request for the method "admin.rebuildindex".
       *
       * This request holds the parameters needed by the the skooziqna server.  After setting any
       * optional parameters, call the {@link Rebuildindex#execute()} method to invoke the remote
       * operation. <p> {@link
       * Rebuildindex#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Rebuildindex() {
        super(Skooziqna.this, "GET", REST_PATH, null, com.appspot.skoozi_959.skooziqna.model.CoreModelsStatusResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Rebuildindex setAlt(java.lang.String alt) {
        return (Rebuildindex) super.setAlt(alt);
      }

      @Override
      public Rebuildindex setFields(java.lang.String fields) {
        return (Rebuildindex) super.setFields(fields);
      }

      @Override
      public Rebuildindex setKey(java.lang.String key) {
        return (Rebuildindex) super.setKey(key);
      }

      @Override
      public Rebuildindex setOauthToken(java.lang.String oauthToken) {
        return (Rebuildindex) super.setOauthToken(oauthToken);
      }

      @Override
      public Rebuildindex setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Rebuildindex) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Rebuildindex setQuotaUser(java.lang.String quotaUser) {
        return (Rebuildindex) super.setQuotaUser(quotaUser);
      }

      @Override
      public Rebuildindex setUserIp(java.lang.String userIp) {
        return (Rebuildindex) super.setUserIp(userIp);
      }

      @Override
      public Rebuildindex set(String parameterName, Object value) {
        return (Rebuildindex) super.set(parameterName, value);
      }
    }
    /**
     * Reset the search index
     *
     * Create a request for the method "admin.resetindex".
     *
     * This request holds the parameters needed by the skooziqna server.  After setting any optional
     * parameters, call the {@link Resetindex#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Resetindex resetindex() throws java.io.IOException {
      Resetindex result = new Resetindex();
      initialize(result);
      return result;
    }

    public class Resetindex extends SkooziqnaRequest<com.appspot.skoozi_959.skooziqna.model.CoreModelsStatusResponse> {

      private static final String REST_PATH = "resetindex";

      /**
       * Reset the search index
       *
       * Create a request for the method "admin.resetindex".
       *
       * This request holds the parameters needed by the the skooziqna server.  After setting any
       * optional parameters, call the {@link Resetindex#execute()} method to invoke the remote
       * operation. <p> {@link
       * Resetindex#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Resetindex() {
        super(Skooziqna.this, "GET", REST_PATH, null, com.appspot.skoozi_959.skooziqna.model.CoreModelsStatusResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Resetindex setAlt(java.lang.String alt) {
        return (Resetindex) super.setAlt(alt);
      }

      @Override
      public Resetindex setFields(java.lang.String fields) {
        return (Resetindex) super.setFields(fields);
      }

      @Override
      public Resetindex setKey(java.lang.String key) {
        return (Resetindex) super.setKey(key);
      }

      @Override
      public Resetindex setOauthToken(java.lang.String oauthToken) {
        return (Resetindex) super.setOauthToken(oauthToken);
      }

      @Override
      public Resetindex setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Resetindex) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Resetindex setQuotaUser(java.lang.String quotaUser) {
        return (Resetindex) super.setQuotaUser(quotaUser);
      }

      @Override
      public Resetindex setUserIp(java.lang.String userIp) {
        return (Resetindex) super.setUserIp(userIp);
      }

      @Override
      public Resetindex set(String parameterName, Object value) {
        return (Resetindex) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Answer collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Skooziqna skooziqna = new Skooziqna(...);}
   *   {@code Skooziqna.Answer.List request = skooziqna.answer().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Answer answer() {
    return new Answer();
  }

  /**
   * The "answer" collection of methods.
   */
  public class Answer {

    /**
     * Insert an answer provided by a user for a specific question. User will be created if required
     *
     * Create a request for the method "answer.insert".
     *
     * This request holds the parameters needed by the skooziqna server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.skoozi_959.skooziqna.model.CoreModelsAnswerMessage}
     * @return the request
     */
    public Insert insert(com.appspot.skoozi_959.skooziqna.model.CoreModelsAnswerMessage content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends SkooziqnaRequest<com.appspot.skoozi_959.skooziqna.model.CoreModelsPostResponse> {

      private static final String REST_PATH = "answer/insert";

      /**
       * Insert an answer provided by a user for a specific question. User will be created if required
       *
       * Create a request for the method "answer.insert".
       *
       * This request holds the parameters needed by the the skooziqna server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.skoozi_959.skooziqna.model.CoreModelsAnswerMessage}
       * @since 1.13
       */
      protected Insert(com.appspot.skoozi_959.skooziqna.model.CoreModelsAnswerMessage content) {
        super(Skooziqna.this, "POST", REST_PATH, content, com.appspot.skoozi_959.skooziqna.model.CoreModelsPostResponse.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Question collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Skooziqna skooziqna = new Skooziqna(...);}
   *   {@code Skooziqna.Question.List request = skooziqna.question().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Question question() {
    return new Question();
  }

  /**
   * The "question" collection of methods.
   */
  public class Question {

    /**
     * Inserts the question to the datastore and makes it available for searching. Will also create user
     * account if it doesn't exist
     *
     * Create a request for the method "question.insert".
     *
     * This request holds the parameters needed by the skooziqna server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.skoozi_959.skooziqna.model.CoreModelsQuestionMessage}
     * @return the request
     */
    public Insert insert(com.appspot.skoozi_959.skooziqna.model.CoreModelsQuestionMessage content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends SkooziqnaRequest<com.appspot.skoozi_959.skooziqna.model.CoreModelsPostResponse> {

      private static final String REST_PATH = "question/insert";

      /**
       * Inserts the question to the datastore and makes it available for searching. Will also create
       * user account if it doesn't exist
       *
       * Create a request for the method "question.insert".
       *
       * This request holds the parameters needed by the the skooziqna server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.skoozi_959.skooziqna.model.CoreModelsQuestionMessage}
       * @since 1.13
       */
      protected Insert(com.appspot.skoozi_959.skooziqna.model.CoreModelsQuestionMessage content) {
        super(Skooziqna.this, "POST", REST_PATH, content, com.appspot.skoozi_959.skooziqna.model.CoreModelsPostResponse.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Get all answers related to the specified question.
     *
     * Create a request for the method "question.listAnswers".
     *
     * This request holds the parameters needed by the skooziqna server.  After setting any optional
     * parameters, call the {@link ListAnswers#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public ListAnswers listAnswers() throws java.io.IOException {
      ListAnswers result = new ListAnswers();
      initialize(result);
      return result;
    }

    public class ListAnswers extends SkooziqnaRequest<com.appspot.skoozi_959.skooziqna.model.CoreModelsAnswerMessageCollection> {

      private static final String REST_PATH = "question/answers";

      /**
       * Get all answers related to the specified question.
       *
       * Create a request for the method "question.listAnswers".
       *
       * This request holds the parameters needed by the the skooziqna server.  After setting any
       * optional parameters, call the {@link ListAnswers#execute()} method to invoke the remote
       * operation. <p> {@link
       * ListAnswers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected ListAnswers() {
        super(Skooziqna.this, "GET", REST_PATH, null, com.appspot.skoozi_959.skooziqna.model.CoreModelsAnswerMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListAnswers setAlt(java.lang.String alt) {
        return (ListAnswers) super.setAlt(alt);
      }

      @Override
      public ListAnswers setFields(java.lang.String fields) {
        return (ListAnswers) super.setFields(fields);
      }

      @Override
      public ListAnswers setKey(java.lang.String key) {
        return (ListAnswers) super.setKey(key);
      }

      @Override
      public ListAnswers setOauthToken(java.lang.String oauthToken) {
        return (ListAnswers) super.setOauthToken(oauthToken);
      }

      @Override
      public ListAnswers setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListAnswers) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListAnswers setQuotaUser(java.lang.String quotaUser) {
        return (ListAnswers) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListAnswers setUserIp(java.lang.String userIp) {
        return (ListAnswers) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public ListAnswers setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public ListAnswers set(String parameterName, Object value) {
        return (ListAnswers) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Questions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Skooziqna skooziqna = new Skooziqna(...);}
   *   {@code Skooziqna.Questions.List request = skooziqna.questions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Questions questions() {
    return new Questions();
  }

  /**
   * The "questions" collection of methods.
   */
  public class Questions {

    /**
     * Gets a list of questions within the radius specified by the coordinates. Radius is in km.
     *
     * Create a request for the method "questions.list".
     *
     * This request holds the parameters needed by the skooziqna server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends SkooziqnaRequest<com.appspot.skoozi_959.skooziqna.model.CoreModelsQuestionMessageCollection> {

      private static final String REST_PATH = "questions/list";

      /**
       * Gets a list of questions within the radius specified by the coordinates. Radius is in km.
       *
       * Create a request for the method "questions.list".
       *
       * This request holds the parameters needed by the the skooziqna server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Skooziqna.this, "GET", REST_PATH, null, com.appspot.skoozi_959.skooziqna.model.CoreModelsQuestionMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Double lat;

      /**

       */
      public java.lang.Double getLat() {
        return lat;
      }

      public List setLat(java.lang.Double lat) {
        this.lat = lat;
        return this;
      }

      @com.google.api.client.util.Key("radius_km")
      private java.lang.Double radiusKm;

      /**

       */
      public java.lang.Double getRadiusKm() {
        return radiusKm;
      }

      public List setRadiusKm(java.lang.Double radiusKm) {
        this.radiusKm = radiusKm;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double lon;

      /**

       */
      public java.lang.Double getLon() {
        return lon;
      }

      public List setLon(java.lang.Double lon) {
        this.lon = lon;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Skooziqna}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Skooziqna}. */
    @Override
    public Skooziqna build() {
      return new Skooziqna(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SkooziqnaRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSkooziqnaRequestInitializer(
        SkooziqnaRequestInitializer skooziqnaRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(skooziqnaRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
